// swap x[0] with arr0[idx], x[1] with arr1[idx]
procedure swap_arr(int x[2], int arr0[], int arr1[], int idx)
    x[0] <=> arr0[idx]
    x[1] <=> arr1[idx]

// swap `x` and `y`
procedure swap(int x[2], int y[2])
    x[0] <=> y[0]
    x[1] <=> y[1]

// add `y` to `x`
procedure add(int x[2], int y[2])
    x[0] += y[0]
    x[1] += y[1]

// subtract `y` from `x`
procedure sub(int x[2], int y[2])
    x[0] -= y[0]
    x[1] -= y[1]

// multiply `x` by `2`
// fails when reverse-executing if LSB is `1`
procedure mul2(int x[2])
    local int tmp[2]
    call add(tmp, x)
    call add(x, tmp)
    tmp[0] -= x[0] / 2
    tmp[1] -= x[1] / 2
    delocal int tmp[2]

// x' = -x
procedure negate(int x[2])
    local int tmp[2]
    tmp[0] += x[0]
    tmp[1] += x[1]
    x[0] -= 2 * tmp[0]
    x[1] -= 2 * tmp[1]
    tmp[0] += x[0]
    tmp[1] += x[1]
    delocal int tmp[2]

// rotate x 90 degrees clockwise
procedure rot90(int x[2])
    x[0] <=> x[1]
    local int tmp
    tmp += x[0]
    x[0] -= 2 * tmp
    tmp += x[0]
    delocal int tmp

// decide the index `other` to swap element index `i` with, given the size of the input
procedure scramble_idx(int i, int other, int log2N)
    local int j
    from j = 0
    loop
        if (i & (1 << j)) != 0 then
            other += 1 << log2N - j - 1
        fi (i & (1 << j)) != 0
        j += 1
    until j = log2N
    delocal int j = log2N

// perform a full even-odd scramble of `arr`, making it ready for the FFT algorithm
procedure scramble(int arr[], int log2N)
    local int N = 2 ** log2N
    local int i
    from i = 0
    loop
        local int other
        call scramble_idx(i, other, log2N, N)
        local int tmp
        if i < other then
            arr[i] <=> tmp
            arr[other] <=> tmp
            arr[i] <=> tmp
        fi i < other
        delocal int tmp
        uncall scramble_idx(i, other, log2N, N)
        delocal int other
        i += 1
    until i = N
    delocal int i = N
    delocal int N = 2 ** log2N

// multiplies `x` by `a`
// `a` is not a direct representation of a complex number, instead:
// `a[0] = -(a_r - 1)/a_i`
// `a[1] = a_i`
procedure mul(int x[2], int a[2], int twiddle_fixpoint)
    x[0] -= (a[0] * x[1]) >> twiddle_fixpoint
    x[1] += (a[1] * x[0]) >> twiddle_fixpoint
    x[0] -= (a[0] * x[1]) >> twiddle_fixpoint

// multiply indices `[offset; offset + length)` by `W^(k * k_step)` for `k in [0; length)`
procedure mul_coefficients(
    int reals[],
    int imags[],
    int twiddle_m[],
    int twiddle_i[],
    int twiddle_fixpoint,
    int offset,
    int length,
    int k_step
)
    if length > 1 then
        local int halflength = length / 2
        local int idx = 1 // skip 0, as it isn't rotated
        from idx = 1
        loop
            local int a[2]
            a[0] += twiddle_m[idx * k_step]
            a[1] += twiddle_i[idx * k_step]

            local int y[2]
            call swap_arr(y, reals, imags, idx + offset)
            call mul(y, a, twiddle_fixpoint)
            call swap_arr(y, reals, imags, idx + offset)

            call swap_arr(y, reals, imags, length - idx + offset)
            uncall mul(y, a, twiddle_fixpoint)
            call negate(y)
            call swap_arr(y, reals, imags, length - idx + offset)
            delocal int y[2]

            a[1] -= twiddle_i[idx * k_step]
            a[0] -= twiddle_m[idx * k_step]
            delocal int a[2]
            idx += 1
        until idx = halflength

        local int y[2]
        call swap_arr(y, reals, imags, idx + offset)
        call rot90(y)
        call swap_arr(y, reals, imags, idx + offset)
        delocal int y[2]
        delocal int idx = halflength
        delocal int halflength = length / 2
    fi length > 1

// convolves x and y resulting in:
// x' = x + y
// y' = x - y
procedure convolve(int x[2], int y[2])
    call sub(x, y)
    call mul2(y)
    call add(y, x)
    call swap(x, y)

// convolve even and odd indexes
procedure convolve_pairs(int reals[], int imags[], int offset, int length)
    local int halflength = length / 2
    local int idx = 0
    from idx = 0
    loop
        local int x[2]
        local int y[2]

        call swap_arr(x, reals, imags, idx + offset)
        call swap_arr(y, reals, imags, idx + halflength + offset)
        call convolve(x, y)
        call swap_arr(y, reals, imags, idx + halflength + offset)
        call swap_arr(x, reals, imags, idx + offset)

        delocal int y[2]
        delocal int x[2]

        idx += 1
    until idx = halflength
    delocal int idx = halflength
    delocal int halflength = length / 2

procedure step(
    int layer,
    int log2N,
    int reals[],
    int imags[],
    int twiddle_m[],
    int twiddle_i[],
    int twiddle_fixpoint
)
    local int N = 2 ** layer
    local int num_sections = 2 ** (log2N - layer)

    local int section
    from section = 0
    loop
        local int section_offset = section * N
        call mul_coefficients(
            reals,
            imags,
            twiddle_m,
            twiddle_i,
            twiddle_fixpoint,
            section_offset + N / 2,
            N / 2,
            num_sections
        )
        call convolve_pairs(reals, imags, section_offset, N)
        delocal int section_offset = section * N
        section += 1
    until section = num_sections
    delocal int section = num_sections

    delocal int num_sections = 2 ** (log2N - layer)
    delocal int N = 2 ** layer

procedure fft (
    int log2N,
    int reals[],
    int imags[],
    int twiddle_m[],
    int twiddle_i[],
    int twiddle_fixpoint
)
    call scramble(reals, log2N)
    local int layer = 0
    from layer = 0
    do
        layer += 1
        call step(layer, log2N, reals, imags, twiddle_m, twiddle_i, twiddle_fixpoint)
    until layer = log2N
    delocal int layer = log2N

procedure main()
    int log2N = 8

    // twiddle factor values
    int twiddle_fixpoint = 16
    constant int twiddle_m[] = {0, 804, 1608, 2413, 3219, 4026, 4834, 5643, 6454, 7267, 8083, 8900, 9721, 10544, 11371, 12201, 13035, 13874, 14716, 15563, 16415, 17273, 18136, 19005, 19880, 20761, 21650, 22545, 23449, 24360, 25280, 26208, 27145, 28092, 29050, 30017, 30996, 31986, 32988, 34002, 35029, 36070, 37125, 38195, 39280, 40382, 41500, 42635, 43789, 44962, 46155, 47369, 48604, 49862, 51144, 52451, 53784, 55143, 56531, 57949, 59398, 60879, 62395, 63946}
    constant int twiddle_i[] = {0, 1608, 3215, 4821, 6423, 8022, 9616, 11204, 12785, 14359, 15923, 17479, 19024, 20557, 22078, 23586, 25079, 26557, 28020, 29465, 30893, 32302, 33692, 35061, 36409, 37736, 39039, 40319, 41575, 42806, 44011, 45189, 46340, 47464, 48558, 49624, 50660, 51665, 52639, 53581, 54491, 55368, 56212, 57022, 57797, 58538, 59243, 59913, 60547, 61144, 61705, 62228, 62714, 63162, 63571, 63943, 64276, 64571, 64826, 65043, 65220, 65358, 65457, 65516}

    int reals[] = {0, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56755, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56756, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -1, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56755, -5518, 63891, 85190, -85192, -63894, 5516, -56756, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56756, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56754, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434, 28319, -120649, -51240, 56755, -5518, 63891, 85190, -85192, -63894, 5516, -56757, 51237, 120647, -28321, -28437, -7138, -107995, -2, 107993, 7136, 28434}
    int imags[256]

    call fft(log2N, reals, imags, twiddle_m, twiddle_i, twiddle_fixpoint)
