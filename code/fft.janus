// swap x[0] with arr0[idx], x[1] with arr1[idx]
procedure swap_arr(int x[2], int arr0[], int arr1[], int idx)
    x[0] <=> arr0[idx]
    x[1] <=> arr1[idx]

// swap `x` and `y`
procedure swap(int x[2], int y[2])
    x[0] <=> y[0]
    x[1] <=> y[1]

// add `y` to `x`
procedure add(int x[2], int y[2])
    x[0] += y[0]
    x[1] += y[1]

// subtract `y` from `x`
procedure sub(int x[2], int y[2])
    x[0] -= y[0]
    x[1] -= y[1]

// multiply `x` by `2`
// fails when reverse-executing if LSB is `1`
procedure mul2(int x[2])
    local int tmp[2]
    call add(tmp, x)
    call add(x, tmp)
    tmp[0] -= x[0] / 2
    tmp[1] -= x[1] / 2
    delocal int tmp[2]

// x' = -x
procedure negate(int x[2])
    local int tmp[2]
    tmp[0] += x[0]
    tmp[1] += x[1]
    x[0] -= 2 * tmp[0]
    x[1] -= 2 * tmp[1]
    tmp[0] += x[0]
    tmp[1] += x[1]
    delocal int tmp[2]

// rotate x 90 degrees clockwise
procedure rot90(int x[2])
    x[0] <=> x[1]
    local int tmp
    tmp += x[0]
    x[0] -= 2 * tmp
    tmp += x[0]
    delocal int tmp

// decide the index `other` to swap element index `i` with, given the size of the input
procedure scramble_idx(int i, int other, int log2N)
    local int j
    from j = 0
    loop
        if (i & (1 << j)) != 0 then
            other += 1 << log2N - j - 1
        fi (i & (1 << j)) != 0
        j += 1
    until j = log2N
    delocal int j = log2N

// perform a full even-odd scramble of `arr`, making it ready for the FFT algorithm
procedure scramble(int arr[], int log2N)
    local int N = 2 ** log2N
    local int i
    from i = 0
    loop
        local int other
        call scramble_idx(i, other, log2N, N)
        local int tmp
        if i < other then
            arr[i] <=> tmp
            arr[other] <=> tmp
            arr[i] <=> tmp
        fi i < other
        delocal int tmp
        uncall scramble_idx(i, other, log2N, N)
        delocal int other
        i += 1
    until i = N
    delocal int i = N
    delocal int N = 2 ** log2N

// multiplies `x` by `a`
// `a` is not a direct representation of a complex number, instead:
// `a[0] = -(a_r - 1)/a_i`
// `a[1] = a_i`
procedure mul(int x[2], int a[2], int twiddle_bits)
    x[0] -= (a[0] * x[1]) >> twiddle_bits
    x[1] += (a[1] * x[0]) >> twiddle_bits
    x[0] -= (a[0] * x[1]) >> twiddle_bits

// multiply indices `[offset; offset + length)` by `W^(k * k_step)` for `k in [0; length)`
procedure mul_coefficients(
    int reals[],
    int imags[],
    int twiddle_m[],
    int twiddle_i[],
    int twiddle_bits,
    int offset,
    int length,
    int k_step
)
    if length > 1 then
        local int halflength = length / 2
        local int idx = 1 // skip 0, as it isn't rotated
        from idx = 1
        loop
            local int a[2]
            a[0] += twiddle_m[idx * k_step]
            a[1] += twiddle_i[idx * k_step]

            local int y[2]
            call swap_arr(y, reals, imags, idx + offset)
            call mul(y, a, twiddle_bits)
            call swap_arr(y, reals, imags, idx + offset)

            call swap_arr(y, reals, imags, length - idx + offset)
            uncall mul(y, a, twiddle_bits)
            call negate(y)
            call swap_arr(y, reals, imags, length - idx + offset)
            delocal int y[2]

            a[1] -= twiddle_i[idx * k_step]
            a[0] -= twiddle_m[idx * k_step]
            delocal int a[2]
            idx += 1
        until idx = halflength

        local int y[2]
        call swap_arr(y, reals, imags, idx + offset)
        call rot90(y)
        call swap_arr(y, reals, imags, idx + offset)
        delocal int y[2]
        delocal int idx = halflength
        delocal int halflength = length / 2
    fi length > 1

// convolves x and y resulting in:
// x' = x + y
// y' = x - y
procedure convolve(int x[2], int y[2])
    call sub(x, y)
    call mul2(y)
    call add(y, x)
    call swap(x, y)

// convolve even and odd indexes
procedure convolve_pairs(int reals[], int imags[], int offset, int length)
    local int halflength = length / 2
    local int idx = 0
    from idx = 0
    loop
        local int x[2]
        local int y[2]

        call swap_arr(x, reals, imags, idx + offset)
        call swap_arr(y, reals, imags, idx + halflength + offset)
        call convolve(x, y)
        call swap_arr(y, reals, imags, idx + halflength + offset)
        call swap_arr(x, reals, imags, idx + offset)

        delocal int y[2]
        delocal int x[2]

        idx += 1
    until idx = halflength
    delocal int idx = halflength
    delocal int halflength = length / 2

procedure step(
    int layer,
    int log2N,
    int reals[],
    int imags[],
    int twiddle_m[],
    int twiddle_i[],
    int twiddle_bits
)
    local int N = 2 ** layer
    local int num_sections = 2 ** (log2N - layer)

    local int section
    from section = 0
    loop
        local int section_offset = section * N
        call mul_coefficients(
            reals,
            imags,
            twiddle_m,
            twiddle_i,
            twiddle_bits,
            section_offset + N / 2,
            N / 2,
            num_sections
        )
        call convolve_pairs(reals, imags, section_offset, N)
        delocal int section_offset = section * N
        section += 1
    until section = num_sections
    delocal int section = num_sections

    delocal int num_sections = 2 ** (log2N - layer)
    delocal int N = 2 ** layer

procedure fft (
    int log2N,
    int reals[],
    int imags[],
    int twiddle_m[],
    int twiddle_i[],
    int twiddle_bits
)
    call scramble(reals, log2N)
    local int layer = 0
    from layer = 0
    do
        layer += 1
        call step(layer, log2N, reals, imags, twiddle_m, twiddle_i, twiddle_bits)
    until layer = log2N
    delocal int layer = log2N

procedure main()
    int log2N = 8

    int imags[256]
    int reals[256]

    int twiddle_m[64]
    int twiddle_i[64]
    int twiddle_bits = 16

    // twiddle factor values
    twiddle_m[1] += 804
    twiddle_m[2] += 1608
    twiddle_m[3] += 2413
    twiddle_m[4] += 3219
    twiddle_m[5] += 4026
    twiddle_m[6] += 4834
    twiddle_m[7] += 5643
    twiddle_m[8] += 6454
    twiddle_m[9] += 7267
    twiddle_m[10] += 8083
    twiddle_m[11] += 8900
    twiddle_m[12] += 9721
    twiddle_m[13] += 10544
    twiddle_m[14] += 11371
    twiddle_m[15] += 12201
    twiddle_m[16] += 13035
    twiddle_m[17] += 13874
    twiddle_m[18] += 14716
    twiddle_m[19] += 15563
    twiddle_m[20] += 16415
    twiddle_m[21] += 17273
    twiddle_m[22] += 18136
    twiddle_m[23] += 19005
    twiddle_m[24] += 19880
    twiddle_m[25] += 20761
    twiddle_m[26] += 21650
    twiddle_m[27] += 22545
    twiddle_m[28] += 23449
    twiddle_m[29] += 24360
    twiddle_m[30] += 25280
    twiddle_m[31] += 26208
    twiddle_m[32] += 27145
    twiddle_m[33] += 28092
    twiddle_m[34] += 29050
    twiddle_m[35] += 30017
    twiddle_m[36] += 30996
    twiddle_m[37] += 31986
    twiddle_m[38] += 32988
    twiddle_m[39] += 34002
    twiddle_m[40] += 35029
    twiddle_m[41] += 36070
    twiddle_m[42] += 37125
    twiddle_m[43] += 38195
    twiddle_m[44] += 39280
    twiddle_m[45] += 40382
    twiddle_m[46] += 41500
    twiddle_m[47] += 42635
    twiddle_m[48] += 43789
    twiddle_m[49] += 44962
    twiddle_m[50] += 46155
    twiddle_m[51] += 47369
    twiddle_m[52] += 48604
    twiddle_m[53] += 49862
    twiddle_m[54] += 51144
    twiddle_m[55] += 52451
    twiddle_m[56] += 53784
    twiddle_m[57] += 55143
    twiddle_m[58] += 56531
    twiddle_m[59] += 57949
    twiddle_m[60] += 59398
    twiddle_m[61] += 60879
    twiddle_m[62] += 62395
    twiddle_m[63] += 63946

    twiddle_i[1] += 1608
    twiddle_i[2] += 3215
    twiddle_i[3] += 4821
    twiddle_i[4] += 6423
    twiddle_i[5] += 8022
    twiddle_i[6] += 9616
    twiddle_i[7] += 11204
    twiddle_i[8] += 12785
    twiddle_i[9] += 14359
    twiddle_i[10] += 15923
    twiddle_i[11] += 17479
    twiddle_i[12] += 19024
    twiddle_i[13] += 20557
    twiddle_i[14] += 22078
    twiddle_i[15] += 23586
    twiddle_i[16] += 25079
    twiddle_i[17] += 26557
    twiddle_i[18] += 28020
    twiddle_i[19] += 29465
    twiddle_i[20] += 30893
    twiddle_i[21] += 32302
    twiddle_i[22] += 33692
    twiddle_i[23] += 35061
    twiddle_i[24] += 36409
    twiddle_i[25] += 37736
    twiddle_i[26] += 39039
    twiddle_i[27] += 40319
    twiddle_i[28] += 41575
    twiddle_i[29] += 42806
    twiddle_i[30] += 44011
    twiddle_i[31] += 45189
    twiddle_i[32] += 46340
    twiddle_i[33] += 47464
    twiddle_i[34] += 48558
    twiddle_i[35] += 49624
    twiddle_i[36] += 50660
    twiddle_i[37] += 51665
    twiddle_i[38] += 52639
    twiddle_i[39] += 53581
    twiddle_i[40] += 54491
    twiddle_i[41] += 55368
    twiddle_i[42] += 56212
    twiddle_i[43] += 57022
    twiddle_i[44] += 57797
    twiddle_i[45] += 58538
    twiddle_i[46] += 59243
    twiddle_i[47] += 59913
    twiddle_i[48] += 60547
    twiddle_i[49] += 61144
    twiddle_i[50] += 61705
    twiddle_i[51] += 62228
    twiddle_i[52] += 62714
    twiddle_i[53] += 63162
    twiddle_i[54] += 63571
    twiddle_i[55] += 63943
    twiddle_i[56] += 64276
    twiddle_i[57] += 64571
    twiddle_i[58] += 64826
    twiddle_i[59] += 65043
    twiddle_i[60] += 65220
    twiddle_i[61] += 65358
    twiddle_i[62] += 65457
    twiddle_i[63] += 65516

    reals[0] += 0
    reals[1] += 107993
    reals[2] += 7136
    reals[3] += 28434
    reals[4] += 28319
    reals[5] += -120649
    reals[6] += -51240
    reals[7] += 56754
    reals[8] += -5518
    reals[9] += 63891
    reals[10] += 85190
    reals[11] += -85192
    reals[12] += -63894
    reals[13] += 5516
    reals[14] += -56757
    reals[15] += 51237
    reals[16] += 120647
    reals[17] += -28321
    reals[18] += -28437
    reals[19] += -7138
    reals[20] += -107995
    reals[21] += -2
    reals[22] += 107993
    reals[23] += 7136
    reals[24] += 28434
    reals[25] += 28319
    reals[26] += -120649
    reals[27] += -51240
    reals[28] += 56754
    reals[29] += -5518
    reals[30] += 63891
    reals[31] += 85190
    reals[32] += -85192
    reals[33] += -63894
    reals[34] += 5516
    reals[35] += -56757
    reals[36] += 51237
    reals[37] += 120647
    reals[38] += -28321
    reals[39] += -28437
    reals[40] += -7138
    reals[41] += -107995
    reals[42] += -2
    reals[43] += 107993
    reals[44] += 7136
    reals[45] += 28434
    reals[46] += 28319
    reals[47] += -120649
    reals[48] += -51240
    reals[49] += 56754
    reals[50] += -5518
    reals[51] += 63891
    reals[52] += 85190
    reals[53] += -85192
    reals[54] += -63894
    reals[55] += 5516
    reals[56] += -56757
    reals[57] += 51237
    reals[58] += 120647
    reals[59] += -28321
    reals[60] += -28437
    reals[61] += -7138
    reals[62] += -107995
    reals[63] += -2
    reals[64] += 107993
    reals[65] += 7136
    reals[66] += 28434
    reals[67] += 28319
    reals[68] += -120649
    reals[69] += -51240
    reals[70] += 56754
    reals[71] += -5518
    reals[72] += 63891
    reals[73] += 85190
    reals[74] += -85192
    reals[75] += -63894
    reals[76] += 5516
    reals[77] += -56757
    reals[78] += 51237
    reals[79] += 120647
    reals[80] += -28321
    reals[81] += -28437
    reals[82] += -7138
    reals[83] += -107995
    reals[84] += -2
    reals[85] += 107993
    reals[86] += 7136
    reals[87] += 28434
    reals[88] += 28319
    reals[89] += -120649
    reals[90] += -51240
    reals[91] += 56755
    reals[92] += -5518
    reals[93] += 63891
    reals[94] += 85190
    reals[95] += -85192
    reals[96] += -63894
    reals[97] += 5516
    reals[98] += -56757
    reals[99] += 51237
    reals[100] += 120647
    reals[101] += -28321
    reals[102] += -28437
    reals[103] += -7138
    reals[104] += -107995
    reals[105] += -2
    reals[106] += 107993
    reals[107] += 7136
    reals[108] += 28434
    reals[109] += 28319
    reals[110] += -120649
    reals[111] += -51240
    reals[112] += 56754
    reals[113] += -5518
    reals[114] += 63891
    reals[115] += 85190
    reals[116] += -85192
    reals[117] += -63894
    reals[118] += 5516
    reals[119] += -56756
    reals[120] += 51237
    reals[121] += 120647
    reals[122] += -28321
    reals[123] += -28437
    reals[124] += -7138
    reals[125] += -107995
    reals[126] += -2
    reals[127] += 107993
    reals[128] += 7136
    reals[129] += 28434
    reals[130] += 28319
    reals[131] += -120649
    reals[132] += -51240
    reals[133] += 56754
    reals[134] += -5518
    reals[135] += 63891
    reals[136] += 85190
    reals[137] += -85192
    reals[138] += -63894
    reals[139] += 5516
    reals[140] += -56757
    reals[141] += 51237
    reals[142] += 120647
    reals[143] += -28321
    reals[144] += -28437
    reals[145] += -7138
    reals[146] += -107995
    reals[147] += -1
    reals[148] += 107993
    reals[149] += 7136
    reals[150] += 28434
    reals[151] += 28319
    reals[152] += -120649
    reals[153] += -51240
    reals[154] += 56754
    reals[155] += -5518
    reals[156] += 63891
    reals[157] += 85190
    reals[158] += -85192
    reals[159] += -63894
    reals[160] += 5516
    reals[161] += -56757
    reals[162] += 51237
    reals[163] += 120647
    reals[164] += -28321
    reals[165] += -28437
    reals[166] += -7138
    reals[167] += -107995
    reals[168] += -2
    reals[169] += 107993
    reals[170] += 7136
    reals[171] += 28434
    reals[172] += 28319
    reals[173] += -120649
    reals[174] += -51240
    reals[175] += 56755
    reals[176] += -5518
    reals[177] += 63891
    reals[178] += 85190
    reals[179] += -85192
    reals[180] += -63894
    reals[181] += 5516
    reals[182] += -56756
    reals[183] += 51237
    reals[184] += 120647
    reals[185] += -28321
    reals[186] += -28437
    reals[187] += -7138
    reals[188] += -107995
    reals[189] += -2
    reals[190] += 107993
    reals[191] += 7136
    reals[192] += 28434
    reals[193] += 28319
    reals[194] += -120649
    reals[195] += -51240
    reals[196] += 56754
    reals[197] += -5518
    reals[198] += 63891
    reals[199] += 85190
    reals[200] += -85192
    reals[201] += -63894
    reals[202] += 5516
    reals[203] += -56756
    reals[204] += 51237
    reals[205] += 120647
    reals[206] += -28321
    reals[207] += -28437
    reals[208] += -7138
    reals[209] += -107995
    reals[210] += -2
    reals[211] += 107993
    reals[212] += 7136
    reals[213] += 28434
    reals[214] += 28319
    reals[215] += -120649
    reals[216] += -51240
    reals[217] += 56754
    reals[218] += -5518
    reals[219] += 63891
    reals[220] += 85190
    reals[221] += -85192
    reals[222] += -63894
    reals[223] += 5516
    reals[224] += -56757
    reals[225] += 51237
    reals[226] += 120647
    reals[227] += -28321
    reals[228] += -28437
    reals[229] += -7138
    reals[230] += -107995
    reals[231] += -2
    reals[232] += 107993
    reals[233] += 7136
    reals[234] += 28434
    reals[235] += 28319
    reals[236] += -120649
    reals[237] += -51240
    reals[238] += 56755
    reals[239] += -5518
    reals[240] += 63891
    reals[241] += 85190
    reals[242] += -85192
    reals[243] += -63894
    reals[244] += 5516
    reals[245] += -56757
    reals[246] += 51237
    reals[247] += 120647
    reals[248] += -28321
    reals[249] += -28437
    reals[250] += -7138
    reals[251] += -107995
    reals[252] += -2
    reals[253] += 107993
    reals[254] += 7136
    reals[255] += 28434

    call fft(log2N, reals, imags, twiddle_m, twiddle_i, twiddle_bits)
